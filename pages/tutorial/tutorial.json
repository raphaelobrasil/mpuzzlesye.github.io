{
  "description": "Há duas formas básicas para o uso do MPuzzleSyE. A primeira chamo de <span mark>Step-To-Step</span>, a segunda de <span mark>End-To-End</span>. <br/> É importante frisar que o fluxo principal é assíncrono, portanto, durante a execução dos métodos, desenvolva sempre com a possibilidade de ter que lidar com Promises.",
  "cardAlert": "<span><strong>Observação:</strong> Todas as funções do MPuzzleSyE possui carga de processamento menor que 0.02s em condições normais. Inclusive, a própria função do End-To-End cumpre esse requisito.Porém, o layout também afetará diretamente no desempenho do jogo, sugiro tomar cuidado com o uso de dados pesados em conjunto com o fluxo, quanto mais limpo for, melhor a performance. <br/><br/>A renderização do tabuleiro e todo o layout ficará seu a critério, aqui irei apenas instruir como utilizar o fluxo lógico. </span>",
  "body": [
    {
      "menu": "introduction",
      "content": [
        {
          "subtitle": "Método <span mark>Step-To-Step</span> (STS)",
          "subDescription": "O fluxo <span mark>STS</span> é sem dúvida o fluxo mais flexível e leve. Com ele você pode ir executando cada etapa do processo enquanto reage visualmente, a probabilidade de criar um fluxo onde o jogador sinta “a espera” é menor, em troca, há mais custo de desenvolvimento. <br/><br/>Primeiro, é necessário importar as funções que serão utilizadas e configurar o tipo de conteúdo que será usado. <br/>O conteúdo é a informação preenchida no tabuleiro, em default é configurado com 5 cores: <span mark>dark</span>, <span mark>light</span>, <span mark>red</span>, <span mark>blue</span> e <span mark>green</span>.<br/>E aqui também definimos as categorias de efeitos, que são “conteúdo especial” que causam efeitos diversificados, por default temos as categorias <span mark>pattern_four</span> e <span mark>pattern_five</span> que são conquistados ao realizar matchs com 4 e 5 conteúdos em uma combinação, respectivamente.<br/>E há o conteúdo <span mark>void</span> que define quando uma célula do tabuleiro está vazia.  <br/><br/>Os conteúdos configurados no <span mark>stoneConfig</span> recebem ids enumerados a partir do 1. O id 0 é reservado para o espaço vázio, <span mark>void</span>.",
          "titleStep": "Imports",
          "clipBoard": "import { stoneConfig, gameStart, isMatch, clearMatchs, category, activeEffectsInMatchs, sequenceHistory, clearTableMatchAndEffects, organizeStructure, insertNewStones } from 'mpuzzlesye'",
          "codeBoard": [
            "import { stoneConfig, gameStart, isMatch, clearMatchs, category, activeEffectsInMatchs, sequenceHistory, clearTableMatchAndEffects, organizeStructure, insertNewStones } from 'mpuzzlesye'"
          ]
        },
        {
          "titleStep": "Conteúdo default",
          "clipBoard": "const config = stoneConfig({})",
          "codeBoard": ["const config = stoneConfig({})"]
        },
        {
          "titleStep": "Conteúdo customizado",
          "clipBoard": "const config = stoneConfig({stones: ['ONE', 'TWO', 'THREE', 'FOUR', 'FIVE'], categorys: ['A', 'B']})",
          "codeBoard": ["const config = stoneConfig({stones: ['ONE', 'TWO', 'THREE', 'FOUR', 'FIVE'], categorys: ['A', 'B']})"]
        },
        {
          "StepDescription": "Configurado o conteúdo, que para ficar mais fácil o entendimento, irei chamar de <span mark>pedras</span>. Precisamos iniciar o tabuleiro preenchido com as pedras configuradas. <br/>Há uma regra aqui, precisamos criar um <span mark>tabuleiro limpo</span>, esse “conceito” é quando o tabuleiro está com as pedras bem distribuídas entre as células, sem nenhum match. <br/>Aqui apresento o recurso de <span mark>fHelps</span>. São métodos de nível maior que invocam métodos unitários simples e realizam um conjunto de ações mais complexas, facilitando a utilização dos métodos unitários. <br/>Iremos criar um tabuleiro 5x7 (5 linhas e 7 colunas), sem matchs e preenchidos com as pedras definidas.",
          "clipBoard": "const table = await gameStart({ rowCount: 5, columnCount: 7, config })",
          "codeBoard": ["const table = await gameStart({ rowCount: 5, columnCount: 7, config })"]
        }
      ]
    },
    {
      "menu": "matchs",
      "content": [
        {
          "titleStep": "Validando combinações",
          "StepDescription": "Quando houver movimento realizado pelo jogador, devemos validar se é movimento válido ou não. Se for invalido, deve retornar o estado do tabuleiro para a situação anterior ao movimento invalido. <br/>Se for movimento válido, significa que houve combinação, então deverá ser feito o processo de analise da combinação. <br/><br/>Com o <span mark>fHelps</span> é possível retornar essas 3 propriedades: <br/>• <span mark>isMatch</span>: Informará se é válido ou inválido; <br/> • <span mark>effects</span>: É um array, que se vier vazio, representa que não houve efeito de categoria; <br/>• <span mark>match</span>: Contém as informações de todos os matchs, tanto o simples (vertical e horizontal) quanto os cruzados. ",
          "clipBoard": "const matchVerify = await isMatch({ table, config })",
          "codeBoard": ["const matchVerify = await isMatch({ table, config })"]
        },
        {
          "titleStep": "Caso <span mark>não</span> haja efeito de categoria",
          "StepDescription": "Se o movimento for válido e não houver efeito de categoria, devemos seguir com a remoção das pedras combinadas do tabuleiro, deixando os espaços vazios.",
          "clipBoard": "const clearTable = await clearMatchs(table, matchVerify.match)",
          "codeBoard": ["const clearTable = await clearMatchs(table, matchVerify.match)"]
        },
        {
          "titleStep": "Caso haja efeito de categoria",
          "StepDescription": "Quando o <span mark>matchVerify.effects</span> retornar um array preenchido, será necessário aplicar os efeitos de categorias ativados. Nesse momento, será necessário configurar a lista de categorias que serão efetivamente utilizadas pelo tabuleiro, suas regras e métodos que executarão quando ativos. No stoneConfig declaramos as nomenclaturas das categorias existentes. Nesse momento declararemos quais categorias realmente serão usadas e como serão usadas. <br/>Além disto, o método <span mark>category</span> possui três métodos: <br/><span mark>categoryApplication</span>: Método utilizado para aplicar as categorias nas pedras do tabuleiro; <br/><span mark>defaultfive</span>: Método que possui em propriedade outro método para aplicar os efeitos default da categoria de 5 pedras combinadas; <br/><span mark>defaultfour</span>: Método que possui em propriedade outro método para aplicar os efeitos default da categoria de 4 pedras combinadas. <br/><br/>",
          "clipBoard": "const { categoryApplication, defaultfive, defaultfour } = category\r\n\r\nconst activeCategorys = [\r\n  {\r\n   effect: defaultfour.patternFour,\r\n   category: 'pattern_four',\r\n   stoneIds: [1, 2, 3, 4, 5],\r\n   rule: 4\r\n  },{\r\n   effect: defaultfive.patternFive,\r\n   category: 'pattern_five',\r\n   stoneIds: [1, 2, 3, 4, 5],\r\n   rule: 5\r\n  }\r\n]",
          "codeBoard": [
            "const { categoryApplication, defaultfive, defaultfour } = category",
            "const activeCategorys = [",
            "&nbsp;&nbsp;{", 
            "&nbsp;&nbsp;&nbsp;&nbsp;effect: defaultfour.patternFour,",  
            "&nbsp;&nbsp;&nbsp;&nbsp;category: 'pattern_four',",
            "&nbsp;&nbsp;&nbsp;&nbsp;stoneIds: [1, 2, 3, 4, 5],",
            "&nbsp;&nbsp;&nbsp;&nbsp;rule: 4",
            "&nbsp;&nbsp;},{",
            "&nbsp;&nbsp;&nbsp;&nbsp;effect: defaultfive.patternFive,",
            "&nbsp;&nbsp;&nbsp;&nbsp;category: 'pattern_five',",
            "&nbsp;&nbsp;&nbsp;&nbsp;stoneIds: [1, 2, 3, 4, 5],",
            "&nbsp;&nbsp;&nbsp;&nbsp;rule: 5",
            "&nbsp;&nbsp;}",
            "]"
          ]
        }
      ]
    },
    {
      "menu": "categoryeffects",
      "content": [
        {
          "titleStep": "Ativando efeitos de categoria",
          "StepDescription": "Após configurar as categorias que serão utilizadas, precisaremos verificar qual efeito foi ativado no match e executá-lo.",
          "clipBoard": "const explodeStones = await activeEffectsInMatchs({ table, activeCategorys, occurrences: effects })",
          "codeBoard": [
            "const explodeStones = await activeEffectsInMatchs({ table, activeCategorys, occurrences: effects })"
          ]
        },
        {
          "titleStep": "Sequência de efeito",
          "StepDescription": "Após executado o primeiro efeito, ele pode desencadear uma <span mark>onda de efeitos</span>, sendo ativados por serem atingidos pelo efeito anterior. Então, devemos verificar até onde essa “onda” vai e sua sequência.",
          "clipBoard": "const result = await sequenceHistory({ sequenceInitial: explodeStones, table, effects: activeCategorys })",
          "codeBoard": [
            "const result = await sequenceHistory({ sequenceInitial: explodeStones, table, effects: activeCategorys })"
          ]
        },
        {
          "StepDescription": "Após ativado os efeitos de categoria, devemos seguir com a remoção das pedras combinadas do tabuleiro <span mark>e as pedras afetadas pelos efeitos de categoria</span>, deixando os espaços vazios.",
          "clipBoard": "const clearTable = await clearTableMatchAndEffects({ table, match, explodeStones, result })",
          "codeBoard": [
            "const clearTable = await clearTableMatchAndEffects({ table, match, explodeStones, result })"
          ]
        }
      ]
    },
    {
      "menu": "rebuildingtable",
      "content": [
        {
          "subDescription": "<span mark>No fluxo STS, os dois caminhos (com ou sem efeito) é iniciado no mesmo ponto e se cruzam novamente após o método de limpeza</span>",
          "titleStep": "Aplicando a categoria nas pedras",
          "StepDescription": "Depois que a tabela foi limpa, devemos verificar se houve combinações elegíveis para receber efeitos de categoria e serem evoluídas para “pedras especiais”. <br/><br/>E aqui recebemos mais uma definição nova, o <span mark>move</span>. Nela você deve informar qual foi a pedra que o jogador segurou e arrastou, assim como a pedra na qual ele “soltou” a pedra arrastada.<br/><br/>Obs.: O <span mark>move</span> também pode ser undefined, para situações onde o match não foi realizado por movimento direto do usuário.",
          "clipBoard": "const move = { drag: { row: 3, column: 2 }, drop: { row: 2, column: 2 } }\r\nconst applyCategory = await categoryApplication({ table: clearTable, activeCategorys, matchs: match, config, move })",
          "codeBoard": [
            "const move = { drag: { row: 3, column: 2 }, drop: { row: 2, column: 2 } }",
            "const applyCategory = await categoryApplication({ table: clearTable, activeCategorys, matchs: match, config, move })"
          ]
        },
        {
          "StepDescription": "Após aplicar o efeito de categoria, devemos reorganizar o tabuleiro. Ele foi limpo e possui espaços vazios de maneira aleatória. <br/>A lógica básica do match 3 puzzle é que ao elimininar a pedra de cima, a de baixo deve subir e deixar o seu espaço vazio e assim sucessivamente até que os espaços vazios fiquem sempre na última linha do tabuleiro.",
          "clipBoard": "const reorganizeNewTable = await organizeStructure(applyCategory)",
          "codeBoard": [
            "const reorganizeNewTable = await organizeStructure(applyCategory)"
          ] 
        },
        {
          "StepDescription": " Com o tabuleiro reorganizado, devemos preencher novamente os espaços vazios para dar continuidade no jogo.",
          "clipBoard": "const newTable = await insertNewStones(reorganizeNewTable, config)",
          "codeBoard": [
            "const newTable = await insertNewStones(reorganizeNewTable, config)"
          ] 
        }
      ]
    },
    {
      "menu": "endtoend",
      "content": [
        {
          "subtitle": "Método <span mark>End-To-End</span> (ETE)",
          "subDescription": "O fluxo <span mark>ETE</span> é um método <span mark>fHelps</span>. Ele simula todo o fluxo básico do <span mark>STS</span> de uma vez só. Por isso que é o fluxo com o menor custo de desenvolvimento e mais custo de processamento, entretanto, ele retornará um objeto com o resultado separado de cada etapa do fluxo STS.",
          "titleStep": "Imports",
          "clipBoard": "import { fEventsProcess, stoneConfig, category, gameStart } from 'mpuzzlesye'",
          "codeBoard": [
            "import { fEventsProcess, stoneConfig, category, gameStart } from 'mpuzzlesye'"
          ]
        },
        {
          "subDescription": "O uso do <span mark>stoneConfig</span>, <span mark>category</span>, <span mark>gameStart</span> e <span mark>move</span> seguem a mesma lógica, princípio e estrutura que foi explicado no fluxo <span mark>STS</span>. Então, aqui focarei em explicar somente sobre o método <span mark>fEventsProcess</span>.",
          "titleStep": "<span mark>fEventsProcess</span>",
          "StepDescription": "Método responsável por realizar o fluxo <span mark>ETE</span>, deve retornar um objeto completo com todas as informações que podem ser encontradas no fluxo <span mark>STS</span>.<br/>Em situação normal, o tempo de execução é menor que 0.02s, mas é mais propenso a ser afetado pela aplicação que o consumirá.  <br/><br/>Obs.: O <span mark>move</span> também pode ser undefined, para situações onde o match não foi realizado por movimento direto do usuário. ",
          "clipBoard": "const completFlow = await fEventsProcess({ table: valueTableAfterMove, config, activeCategorys, move })",
          "codeBoard": [
            "const completFlow = await fEventsProcess({ table: valueTableAfterMove, config, activeCategorys, move })"
          ]
        }
      ]
    },
    {
      "menu": "tips",
      "content": [
        {
          "subtitle": "Considerações finais.",
          "titleStep": "<span mark>COMBOS</span>",
          "StepDescription": "Após realizar o fluxo completo, independente do fluxo escolhido (STS ou ETE), isso representa somente “1 jogada”. <br/>Tem situações onde o <span mark>insertNewStones</span> preenchererá o tabuleiro e o novo tabuleiro já venha com combinações válidas feitas. <br/>Nesse cenário, pela regra básica do match 3 puzzle, isso contaria como <span mark>combo</span>. Daí, devemos novamente devolver o tabuleiro ao fluxo escolhido. Só que desta vez, não houve movimento por parte do usuário e sim é uma continuação da primeira jogada, classificando a continuidade como <span mark>combo</span>. <br/>Para realizar esse procedimento, há diversas formas e realmente deixo em aberto para fazê-lo como achar melhor. <br/>Para exemplo, coloquei um demonstrativo abaixo, com certeza pode haver formas melhores de fazer isso. Mas, esse exemplo demonstra como pode ser feito. ",
          "clipBoard": "fEventsProcess({ table: valueTableAfterMove, config, activeCategorys, move })\r\n  .then(async (response) => {\r\n    if (response.newTable && response.isMatch.isMatch) {\r\n      let combo = [response]\r\n      let newStep = await fEventsProcess({ table: response.newTable, config, activeCategorys })\r\n      while (combo[combo.length - 1].isMatch.isMatch) {\r\n        newStep = await fEventsProcess({ table: newStep.newTable, config, activeCategorys })\r\n        combo = [...combo, newStep]\r\n    }\r\n  }\r\n})",
          "codeBoard": [
            "fEventsProcess({ table: valueTableAfterMove, config, activeCategorys, move })",
            "&nbsp;&nbsp;.then(async (response) => {",
            "&nbsp;&nbsp;&nbsp;&nbsp;if (response.newTable && response.isMatch.isMatch) {",
            "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let combo = [response]",
            "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let newStep = await fEventsProcess({ table: response.newTable, config, activeCategorys })",
            "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (combo[combo.length - 1].isMatch.isMatch) {",
            "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newStep = await fEventsProcess({ table: newStep.newTable, config, activeCategorys })",
            "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;combo = [...combo, newStep]",
            "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}",
            "&nbsp;&nbsp;&nbsp;&nbsp;}",
            "&nbsp;&nbsp;})"
          ]          
        },
        {
          "subtitle": "<span mark>ATIVAÇÃO</span>",
          "subDescription": "As pedras especiais contém efeito de categoria. E esses efeitos podem ser ativados de 3 formas:<br/>• <span mark>Match</span>: Quando o usuário realiza uma combinação ou em sequência de combo, no match uma pedra de efeito é combinada com outras pedras do mesmo tipo, isso encadeia na ativação do efeito;<br/>• <span mark>Onda de efeito</span>: Quando a pedra especial é atingida por efeito de outra pedra especial, encadeando em sua ativação; <br/>• <span mark>Ativação individual</span>: Isso pode ser totalmente configurado, tanto pode deixar inativo sem que a pedra especial tenha esse recurso quanto tem como definir que caso o usuário click duas vezes em cima da pedra especial, ela será ativada (exemplo). Nesse caso, há um fluxo totalmente especifico para isso.",
          "titleStep": "Imports",
          "clipBoard": "import { activeEffects } from 'mpuzzlesye'",
          "codeBoard": [
            "import { activeEffects } from 'mpuzzlesye'"
          ] 
        },
        {
          "titleStep": "Definindo ação",
          "StepDescription": "Precisamos entregar qual foi a pedra clicada e sua posição, assim como as outras definições configuradas.",
          "clipBoard": "const moveAction = { row: 3, column: 5, stone: { id: 2, type: 'light', category: 'pattern_four' } }\r\nconst effectReact = await activeEffects({ table, activeCategorys , ...moveAction })",
          "codeBoard": [
            "const moveAction = { row: 3, column: 5, stone: { id: 2, type: 'light', category: 'pattern_four' } }",
            "const effectReact = await activeEffects({ table, activeCategorys , ...moveAction })"
          ] 
        },
        {
          "titleStep": "Efeito de Onda",
          "StepDescription": "Após a ativação, as pedras que forem afetadas pelo efeito podem ser especiais também, desencadeando o efeito de onda. <br/>Daqui por diante, o fluxo é o mesmo utilizado no STS.",
          "clipBoard": "const sequence = await sequenceHistory({ sequenceInitial: effectReact, table, effects: activeCategorys })",
          "codeBoard": [
            "const sequence = await sequenceHistory({ sequenceInitial: effectReact, table, effects: activeCategorys })"
          ] 
        }
      ]
    }
  ]
}




